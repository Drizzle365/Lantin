@page "/article/{Id:int}"
@inject IFreeSql Db
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar



<PageTitle>@_article.Title | Lantin</PageTitle>
<MudContainer Style="margin-top:100px">

    @if (_load)
    {
        <MudPaper Class="pa-8 pb-14">
            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="80px"/>
            <MudSkeleton Width="30%" Height="42px;"/>
            <MudSkeleton Width="80%"/>
            <MudSkeleton Width="100%"/>
            <MudCardActions>
                <MudSkeleton Width="160px" Height="60px" Class="ml-2"/>
                <MudSpacer></MudSpacer>
                <MudSkeleton Width="160px" Height="60px" Class="ml-3"/>
            </MudCardActions>
        </MudPaper>
        <br>
        <br>
        <MudCard>
            <MudCardHeader>
                <CardHeaderAvatar>
                    <MudSkeleton SkeletonType="SkeletonType.Circle" Animation="Animation.Wave" Height="40px" Width="40px"/>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudSkeleton Animation="Animation.Wave" Width="80px"/>
                    <MudSkeleton Animation="Animation.Wave" Width="160px"/>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudSkeleton Animation="Animation.Wave"/>
                <MudSkeleton Animation="Animation.Wave"/>
            </MudCardContent>
        </MudCard>
        <br>
        <br>
    }
    else
    {
        <MudPaper Class="pa-8 pb-14">
            <MudText Typo="Typo.h3" Class="mb-5">@_article.Title</MudText>
            <MudChip Icon="@Icons.Material.Filled.Person" Color="Color.Dark">作者</MudChip>
                <MudChip Icon="@Icons.Filled.Numbers" Color="Color.Dark">@(Utility.ReContent(_article.Content).Length) 字</MudChip>
            <MudChip Icon="@Icons.Filled.DateRange" Color="Color.Dark">
                @($"{_article.DateTime.Year}年{_article.DateTime.Month}月{_article.DateTime.Day}日")
            </MudChip>
            <MudChip Icon="@Icons.Filled.AccessTimeFilled" Color="Color.Dark">
                @($"{_article.DateTime.Hour}:{_article.DateTime.Minute}")
            </MudChip>
            <br/><br/>
            <MudText Typo="Typo.body1" Class="pb-8">
                <div class="markdown-body">
                    @(new MarkupString(_article.Content))
                </div>
            </MudText>
            @if (_last is not null)
            {
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Style="float:left" OnClick="GetLast">上一篇：@_last?.Title</MudButton>
            }
            @if (_next is not null)
            {
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Style="float:right" OnClick="GetNext">下一篇：@_next?.Title</MudButton>
            }
        </MudPaper>
        <br/>
        <br/>
        @if (_comments.Count > 0)
        {
            <MudPaper Class="pa-4">
                @foreach (var item in _comments)
                {
                    <MudCard Class="mb-5">
                        <MudCardHeader>
                            <CardHeaderAvatar>
                                <MudAvatar Color="Color.Secondary">@item.Name?.First()</MudAvatar>
                            </CardHeaderAvatar>
                            <CardHeaderContent>
                                @if (item.Url is null)
                                {
                                    <MudText Typo="Typo.body1">@item.Name</MudText>
                                }
                                else
                                {
                                    <NavLink Href="@item.Url" Target="_blank">
                                        <MudText Typo="Typo.body1">@item.Name</MudText>
                                    </NavLink>
                                }
                                <MudText Typo="Typo.body2" Color="Color.Secondary">@item.DateTime</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Reply" Color="Color.Inherit"/>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.body2">
                                @item.Content
                            </MudText>
                        </MudCardContent>
                    </MudCard>
                }
            </MudPaper>
            <br/>
            <br/>
        }
    }

    <MudPaper Class="pa-8">
        <MudText Typo="Typo.h4">评论</MudText>
        <MudGrid Class="pt-5">
            <MudItem xs="12">
                <MudTextField @bind-Value="_email" Label="邮箱 *" Variant="Variant.Filled"/>
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="_name" Label="昵称 *" Variant="Variant.Filled"/>
            </MudItem>
            <MudItem xs="12">
                <MudTextField @bind-Value="_url" Label="网址" Variant="Variant.Filled"/>
            </MudItem>
            <MudItem xs="12">
                <MudTextField Placeholder="在这里输入您的评论内容 *" @bind-Value="_content" Variant="Variant.Filled" Lines="5"/>
            </MudItem>
            <MudItem xs="5">
                <MudButton OnClick="PostComment" Variant="Variant.Filled" Color="Color.Secondary">发送</MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper><br/><br/>
</MudContainer>

@code {
    bool _load = true;

    [Parameter]
    public int Id { get; set; }

    Model.Article _article = new();
    Model.Article? _last;
    Model.Article? _next;
    string? _email;
    string? _name;
    string? _url;
    string? _content;
    List<Model.Comment> _comments = new();

    protected override async void OnInitialized()
    {
        await Load();
    }

    async Task Load()
    {
        _article = await Db.Select<Model.Article>().Where(x => x.ArticleId == Id).FirstAsync();
        _comments = await Db.Select<Model.Comment>().Where(x => x.ArticleId == Id).ToListAsync();
        _last = await Db.Select<Model.Article>()
            .Where(x => x.ArticleId < Id).OrderBy("ArticleId DESC").Limit(1).FirstAsync();
        _next = await Db.Select<Model.Article>()
            .Where(x => x.ArticleId > Id).Limit(1).FirstAsync();
        _load = false;
        StateHasChanged();
    }

    async void GetLast()
    {
        _load = true;
        StateHasChanged();
        Id = _last!.ArticleId;
        NavigationManager.NavigateTo($"/article/{_last?.ArticleId}");
        await Load();
    }

    async void GetNext()
    {
        _load = true;
        StateHasChanged();
        Id = _next!.ArticleId;
        NavigationManager.NavigateTo($"/article/{_next?.ArticleId}");
        await Load();
    }

    async void PostComment()
    {
        Console.WriteLine(_email?.Trim().Length);
        if (_email is null || _name is null || _content is null)
        {
            Snackbar.Add("请填写完整！");
            return;
        }
        await Db.Insert<Model.Comment>()
            .AppendData(new Model.Comment
            {
                ArticleId = Id,
                Email = _email,
                Name = _name,
                Url = _url,
                Content = _content,
                DateTime = DateTime.Now
            })
            .ExecuteIdentityAsync();
        _content = null;
        _comments = await Db.Select<Model.Comment>().Where(x => x.ArticleId == Id).ToListAsync();
        StateHasChanged();
        Snackbar.Add("回复成功~");
    }

}