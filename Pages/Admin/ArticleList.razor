@page "/admin/article/list"
@inject IFreeSql Db
@inject ISnackbar Snackbar

@inject WebSiteConfigService WebSiteConfigService
<PageTitle>文章列表 – @WebSiteConfigService.GetValue("WebSiteName")</PageTitle>
<MudDataGrid SelectedItemsChanged="SelectedItemsChanged" Loading="_loading" T="Model.Article" MultiSelection="true" Items="@_elements" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@QuickFilter"
             Hideable="true">
    <ToolBarContent>
        <MudButtonGroup Variant="Variant.Outlined">
            <MudButton OnClick="Delete">删除</MudButton>
            <MudButton OnClick="() => { Visibility(Model.Visibility.Open); }">公开</MudButton>
            <MudButton OnClick="() => { Visibility(Model.Visibility.Hide); }">私密</MudButton>
        </MudButtonGroup>
        <MudSpacer/>
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="Model.Article"/>
        <Column T="Model.Article" Field="Title" Title="标题"/>
        <Column T="Model.Article" Field="CategorizeId" Title="分类"/>
        <Column T="Model.Article" Field="Visibility" Title="可见"/>
        <Column T="Model.Article" Field="DateTime" Title="日期"/>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="Model.Article"/>
    </PagerContent>
</MudDataGrid>


@code {
    bool _loading = true;
    IEnumerable<Model.Article> _elements = new List<Model.Article>();
    string? _searchString;
    HashSet<Model.Article>? _selected;
    private Func<Model.Article, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;
        if (x.Title != null && x.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (x.Content != null && x.Content.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        _elements = await Db.Select<Model.Article>().ToListAsync();
        _loading = false;
        StateHasChanged();
    }

    void SelectedItemsChanged(HashSet<Model.Article> items)
    {
        _selected = items;
    }

    async void Delete()
    {
        var row = await Db.Delete<Model.Article>()
            .Where(_selected)
            .ExecuteAffrowsAsync();
        Snackbar.Add($"删除了{row}篇文章！");
        _loading = true;
        await OnInitializedAsync();
    }

    async void Visibility(Model.Visibility op)
    {
        var row = await Db.Update<Model.Article>()
            .Where(_selected)
            .Set(x => x.Visibility, op)
            .ExecuteAffrowsAsync();
        Snackbar.Add($"修改了{row}篇文章为{op}");
        _loading = true;
        await OnInitializedAsync();
    }

}