@page "/admin/comment/list"
@inject IFreeSql Db
@inject ISnackbar Snackbar
@inject WebSiteConfigService WebSiteConfigService
<PageTitle>评论列表 – @WebSiteConfigService.GetValue("WebSiteName")</PageTitle>
<MudDataGrid Loading="_loading" SelectedItemsChanged="SelectedItemsChanged" T="Model.Comment" MultiSelection="true" Items="@_elements" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@QuickFilter"
    Hideable="true">
    <ToolBarContent>
        <MudButtonGroup Variant="Variant.Outlined">
            <MudButton OnClick="Delete">删除</MudButton>
        </MudButtonGroup>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <SelectColumn T="Model.Comment" />
        <Column T="Model.Comment" Field="Name" Title="昵称"/>
        <Column T="Model.Comment" Field="Email" Title="邮箱"/>
        <Column T="Model.Comment" Field="Content" Title="内容"/>
        <Column T="Model.Comment" Field="DateTime" Title="日期"/>
    </Columns>
    <PagerContent> 
        <MudDataGridPager T="Model.Comment" />
    </PagerContent>
</MudDataGrid>


@code {
    bool _loading = true;
    private IEnumerable<Model.Comment> _elements = new List<Model.Comment>();
    private string? _searchString;
    HashSet<Model.Comment>? _selected;
    private Func<Model.Comment, bool> QuickFilter => x =>
    {
        if (_searchString != null && string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (_searchString != null && x.Name != null && x.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (_searchString != null && x.Content != null && x.Content.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        _elements = await Db.Select<Model.Comment>().ToListAsync();
        _loading = false;
        StateHasChanged();
    }
    void SelectedItemsChanged(HashSet<Model.Comment> items)
    {
        _selected = items;
    }
    async void Delete()
    {
        var row = await Db.Delete<Model.Comment>()
        .Where(_selected)
        .ExecuteAffrowsAsync();
        Snackbar.Add($"删除了{row}个评论！");
        _loading = true;
        await OnInitializedAsync();
    }

}